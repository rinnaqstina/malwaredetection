from flask import Flask, request, render_template, redirect, url_for
import pandas as pd
import numpy as np
import pickle
import joblib
import os
from werkzeug.utils import secure_filename
from sklearn.feature_selection import SelectFromModel

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads/'

# Load models and vectorizers
with open('models/pickle_model.pkl', 'rb') as f:
    url_model = pickle.load(f)

with open('models/pickle_vector.pkl', 'rb') as f:
    url_vectorizer = pickle.load(f)

file_model = joblib.load('models/classifier.pkl')

with open('models/features.pkl', 'rb') as f:
    file_features = pickle.load(f)

# URL sanitization function
def sanitization(web):
    web = web.lower()
    token = []
    dot_token_slash = []
    raw_slash = str(web).split('/')
    for i in raw_slash:
        raw1 = str(i).split('-')
        slash_token = []
        for j in range(len(raw1)):
            raw2 = str(raw1[j]).split('.')
            slash_token = slash_token + raw2
        dot_token_slash = dot_token_slash + raw1 + slash_token
    token = list(set(dot_token_slash))
    if 'com' in token:
        token.remove('com')
    return token

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    if 'file' in request.files:
        file = request.files['file']
        if file.filename == '':
            return redirect(request.url)
        if file:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            # Process file
            data = pd.read_csv(filepath, sep='|')
            X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
            X_new = SelectFromModel(file_model.estimators_[0], prefit=True).transform(X)
            prediction = file_model.predict(X_new)

            os.remove(filepath)  # Clean up the file after processing
            return render_template('result.html', result=prediction)

    elif 'url' in request.form:
        url = request.form['url']
        if url:
            # Process URL
            url_vector = url_vectorizer.transform([url])
            prediction = url_model.predict(url_vector)
            return render_template('result.html', result=prediction)

    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)
